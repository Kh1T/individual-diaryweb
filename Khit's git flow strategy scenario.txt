Name: Khom Khit , ID : AB2024035 , Team : Alphabeez 
=> What is our scenario?


	

We're developing a measurement conversion program allowing users to convert Pound to Kilogram, Fahrenheit to Celsius, and Mile to Kilometre using python.


In order to collaborate with team members effectively and give each member a separated space to work on their part our team have chosen git-flow as branch management strategy.


What is a git flow ?


=> Git-flow is a Git branching model that involves the use of branches such as feature , bugfix , hotfix, release and develop.
Branch Strategy:
We will set name for each branch and set its role for specific task to handle during the program development as below:
* Main: Used for deployment only when the program is ready for release.
* Develop: Used for ongoing development work.
* Feature: Used for adding new features or code any modification.
* Release: Prepares the codebase for a new release.
* Bugfix: Addresses bugs identified during testing from QA.
* Hotfix: Addresses critical issues in the production code.




Project Development:
1. Preparing source project for development
As a team leader of the project. I will start by preparing this step before collaboration:
1. Create a project inside my computer
2. Initialise local git repository
3. Config username and email
4. Create remote repo on Github, then copy the remote repo url
5. Set up remote repo (or add alias) inside local repo
6. Initialize git-flow in project source 
7. Reflect the latest update(or push) the source project to remote 


2. Add collaborators to Github repository
In this step I will start by adding my team members to the repository I previously created, so they can start working on their part and send their update back to me using Github. This step involve:
   1. Add team member to the remote repository using there Github username or email
   2. Waiting them to accept the invitation to collaborate


3. Opening issues on Github
To conveniently assign specific task for team member to work on, I will follow this step:
   3. Open an issues on github and writing clear title and describe the task
For example:
* Feature 1: Create a feature branch to implement Pound to Kg conversion.
* Feature 2: Implement Fahrenheit to Celsius conversion.
* Feature 3: Develop Mile to Kilometer conversion.
   1. Assign a team member that will be working on this task and add a label for this task. In this case, we want team members to add features to the source project, so we will use the ‘feature’ label.




4. Feature Branches:
The team members that have task assigned will start implement the feature describe below:

Feature 1: Create a feature branch to implement Pound to Kg conversion.
Feature 2: Implement Fahrenheit to Celsius conversion.
Feature 3: Develop Mile to Kilometre conversion.
        
To start implement the feature to the source project each team will follow the step describe below:
1. Clone the source project from the remote repository
2. Reinitialize git local repository
3. Config username and email
4. Initialize git flow 
5. Create feature branch using git flow and name the branch relevant to the feature working on (eg: feature-pound-to-kilogram)
6. Modified the project source based on the requirement
7. Checkout to develop branch and pull the latest update
8. Merge or rebase feature branch with develop branch in case develop have different commit head
9. Publish the branch to github using git flow
10. Create pull request and wait for approval or track by admin
11. Checkout to develop and pull the latest update
12. Finish the feature branch using git flow
13. Reflect develop in local to develop branch in remote
5. Release Branches:
Since our development team has completely implemented all the features required and tested all the features are working. So, it is time to release the project as it is time for the next release cycle.


As a team leader I will prepare as below:
1. Pull the latest update from develop in remote repo
2. Check the previous tag number to ensure I set the correct release tag
3. Start the release branch and set the appropriate version (eg: 1.0)
4. Publish the release branch to github 


To ensure everything is working before deployment, as a team leader I will prepare the project source for the QA team. After testing, QA informed me that the program crashes when trying to convert English characters to kilograms. 


As a team leader I will start taking this action as below:
1. Open an issues on github and writing clear title and describe the task
For example:
* QA_Bugfix 1: Program crashes when trying to convert english character to kilogram
2. Assign a team member that will be working on this task and add a label for this task. In this case, we want team members to fix the release bug, so we will use the ‘QA’ & ‘bugfix’ label.
        
To start fixing the bug in the release branch the team members will follow the step describe below:
1. Track the release from the remote using git flow to local
2. Start bugfix branch from release using git flow
3. Fix the issues informed by QA
4. Checkout to release branch and pull the latest update
5. Merge or rebase bugfix branch with release branch in case release have different commit head
6. Publish the branch to github using git flow
7. Create pull request and wait for approval, track or merged by admin
8. Checkout to release branch and pull the latest update
9. Finish the bugfix branch using git flow
10. Delete the release branch from local, if there are no other issues


On the team leader side, after I merged the changes from bugfix branch to release branch in remote. I will start follow this step:
1. Pull the latest update from release branch in remote
2. Checkout to main and pull the latest update
3. Checkout to develop and pull the latest update
4. Finish the release branch using git flow
5. Write commit message for merging release to main
6. Write commit message for tag
7. Write commit message for merging release to develop
8. Reflect main, develop and push tag to remote




6. Hotfix branch
After we released the program to production, we noticed that there are critical issues that need to be addressed immediately. Some of our features are not working, which doesn't allow them to use the feature.


As a team leader I will start taking this action as below:
1. Open an issues on github and writing clear title and describe the task
For example:
* Hotfix 1: The features are not working, which doesn't allow them to use the program conveniently
3. Assign a team member that will be working on this task and add a label for this task. In this case, we want team members to fix the production bug, so we will use the ‘hotfix’ label.
        
To start fixing the bug in the main branch the team members will follow the step describe below:
1. Pull the latest update from main branch in remote
2. Pull the latest update from develop branch in remote
3. Pull tag from remote
4. Check tag number
5. Start hotfix branch from main and set appropriate tag number
6. Fix the issues informed by team leader
7. Checkout to main branch and pull the latest update
8. Merge or rebase hotfix branch with main branch in case main have different commit head
9. Publish the branch to github using git flow
10. Create pull request and wait for approval, track or merged by admin
11. Checkout to main branch and pull the latest update
12. Checkout to develop branch and pull the latest update
13. Finish the hotfix branch using git flow
14. Write commit message for merging hotfix to main
15. Write commit message for tag
16. Write commit message for merging hotfix to develop
17. Reflect main, develop and push tag to remote






Implementation:


Feature Branches:


Feature 1: Create a feature branch to implement Pound to Kg conversion.
Feature 2: Implement Fahrenheit to Celsius conversion.
Feature 3: Develop Mile to Kilometer conversion.


Release Branch:


Prepare the codebase for release, ensuring all features are thoroughly tested and stable.
Tag the release with the version number (e.g., 1.0).


Bug fix Branch:


Create a bug fix branch to address any identified issues, such as adding missing headings.


Hotfix Branch:


If a critical issue arises post-release (e.g., grammatical errors), immediately create a hotfix branch for resolution.




—--






Feature Branch:


1. Create Branch: Use the command git flow feature start <feature_name>.
2. Track branch : git flow feature track <feature_name>.
3. Publish Branch: Use the command git flow feature publish <feature_name>.
4. Merge/Rebase: After completing the feature, merge or rebase it with the develop branch.
5. Finish Branch: Use the command git flow feature finish <feature_name>.


Release Branch:


1. Create Branch: Use the command git flow release start <version_number>.
2. Track branch : Use command git flow release track <version_number>.
3. Publish Branch: Use the command git flow release publish <version_number>.
4. Merge/Rebase: Merge or rebase the release branch with the main and develop branches.
5. Finish Branch: Use the command git flow release finish <version_number>.


Bug fix Branch:


1. Create Branch: Use the command git flow bugfix start <bug_name>.
2. Publish Branch: Use the command git flow bugfix publish <bug_name>.
3. Merge/Rebase: After fixing the bug, merge or rebase the branch with the develop branch.
4. Finish Branch: Use the command git flow bugfix finish <bug_name>.


Hotfix Branch:


1. Create Branch: Use the command git flow hotfix start <version_number>.
2. Track branch : Use the command git flow hotfix  track <version_number>
3. Publish Branch: Hotfix branches are typically urgent fixes and may not be published.
4. Merge/Rebase: Merge or rebase the hotfix branch with the main and develop branches.
5. Finish Branch: Use the command git flow hotfix finish <version_number>.








For the team collaboration:
* Check commit history : Use the command git log 
* Reset / Revert : 
1. Check history : Use the command git reflog 
2. Copy the commit hash from the commit that I want to revert back.
3. Use command: git reset {commit hash }
* Show remote alias: Use the command cat .git/config
* Show commit history : Use the command git log —pretty=oneline —graph —all